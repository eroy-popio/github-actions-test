name: Build and push golang image to AWS ECR instance

on:
  push:
   branches: [ main ]
jobs:
  build-and-push:
    name: Build and Push to ECR
    runs-on: ubuntu-latest
    steps:
    - name: Checkout
      uses: actions/checkout@v2
      with:
        persist-credentials: false # otherwise, the token used is the GITHUB_TOKEN, instead of your personal access token.
#         fetch-depth: 0 # otherwise, there would be errors pushing refs to the destination repository.
        path: github-actions-test

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-west-2

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1
      
    - name: Change dir
      run: |
        ls
        cd github-actions-test
        ls

#     - name: Download latest earthly
#       run: "sudo /bin/sh -c 'wget https://github.com/earthly/earthly/releases/download/v0.6.19/earthly-linux-amd64 -O /usr/local/bin/earthly && chmod +x /usr/local/bin/earthly'"

#     - name: Earthly build docker image
#       run: earthly +docker

    - name: Automatic Tagging of Releases
      id: increment-git-tag
      run: |
        ls
        cd github-actions-test
        ls
        bash ./build/git_update.sh -v patch
    
#     - name: Tag, and Push the Image to Amazon ECR
#       id: build-image
#       env:
#         ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
#         ECR_REPOSITORY: application-build-docker-images
#         IMAGE_TAG: ${{ steps.increment-git-tag.outputs.git-tag }}
#       run: |
#         docker tag go-example:latest $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
#         docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG

    - name: Change dir
      run: cd ..
      
    - name: Checkout different repo
      uses: actions/checkout@v3
      with:
        persist-credentials: false # otherwise, the token used is the GITHUB_TOKEN, instead of your personal access token.
        fetch-depth: 0 # otherwise, there would be errors pushing refs to the destination repository.
        repository: satvik-eltropy/deployment-config
        ref: main
        path: deployment-config

    - name : List content
      run: ls

    - name: Patch yaml files
      run: |
        kubectl patch --local -f deployment-config/go-example/go-example-deployment.yaml -p '{"spec":{"template":{"spec":{"containers":[{"name":"go-example","image":"${{ steps.login-ecr.outputs.registry }}/application-build-docker-images:${{ steps.increment-git-tag.outputs.git-tag }}"}]}}}}' -o yaml > go-example-deployment.yaml
        cp go-example-deployment.yaml deployment-config/go-example/go-example-deployment.yaml
        kubectl patch --local -f deployment-config/go-app1/go-app1-deployment.yaml -p '{"spec":{"template":{"spec":{"containers":[{"name":"go-app","image":"${{ steps.login-ecr.outputs.registry }}/application-build-docker-images:${{ steps.increment-git-tag.outputs.git-tag }}"}]}}}}' -o yaml > go-app1-deployment.yaml
        cp go-app1-deployment.yaml deployment-config/go-app1/go-app1-deployment.yaml
        kubectl patch --local -f deployment-config/go-app2/go-app2-deployment.yaml -p '{"spec":{"template":{"spec":{"containers":[{"name":"go-app","image":"${{ steps.login-ecr.outputs.registry }}/application-build-docker-images:${{ steps.increment-git-tag.outputs.git-tag }}"}]}}}}' -o yaml > go-app2-deployment.yaml
        cp go-app2-deployment.yaml deployment-config/go-app2/go-app2-deployment.yaml

    - name: Check repo
      env:
        GITHUB_EMAIL: satvik@eltropy.com
        GITHUB_NAME: satvik-eltropy
        API_TOKEN_GITHUB: ${{ secrets.API_TOKEN_GITHUB }}
      run: |
        cd deployment-config
        git log -1
        git status
        git config user.email ${GITHUB_EMAIL}
        git config user.name ${GITHUB_NAME}
        git commit -am "Updated the ecr image link in deployment files"
        git status
        git show
        git fetch
        git status
        echo ${API_TOKEN_GITHUB}
        echo ${GITHUB_NAME}
    
    - name: Push changes
      uses: ad-m/github-push-action@master
      with:
        github_token: ${{ secrets.API_TOKEN_GITHUB }}
        repository: satvik-eltropy/deployment-config
        branch: main
        directory: deployment-config
          
    - name: Get and run argoCD
      env:
        ARGOCD_SERVER: a921f0de06e1c4349b6e6f54cd8d3cec-1309917555.us-west-2.elb.amazonaws.com
        ARGOCD_AUTH_TOKEN: ${{ secrets.ARGOCD_AUTH_TOKEN }}
      run: |
        curl --insecure -sSL -o /usr/local/bin/argocd https://${ARGOCD_SERVER}/download/argocd-linux-amd64
        chmod 755 /usr/local/bin/argocd
        argocd app sync go-example-app --insecure
        argocd app wait go-example-app --insecure
        argocd app sync go-app1 --insecure
        argocd app wait go-app1 --insecure
        argocd app sync go-app2 --insecure
        argocd app wait go-app2 --insecure
